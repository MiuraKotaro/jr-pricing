package jr.pricing.jrpricing.application.service;

import jr.pricing.jrpricing.domain.model.*;
import jr.pricing.jrpricing.domain.model.fare.割引率;
import jr.pricing.jrpricing.domain.model.fare.料金;

import java.time.LocalDate;

public class 料金計算 {
    public 料金 料金計算(駅 降車駅, 利用日 _利用日, 片道往復 _片道往復, 人数 十八才以上, 人数 十八才未満, 特急利用 _特急利用) {

        人数 無料人数 = 無料人数計算(十八才以上.足す(十八才未満));
        if (十八才以上.大なりイコール(無料人数)) {
            十八才以上 = 十八才以上.引く(無料人数);
        } else {
            無料人数 = 無料人数.引く(十八才以上);
            十八才以上 = new 人数(0);
            十八才未満 = 十八才未満.引く(無料人数);
        }

        料金 片道合計金額 = new 料金(0);
        if (十八才以上.大なりイコール(new 人数(1))) {
            料金 大人一人分 = 大人一人分片道計算(降車駅, _特急利用);
            大人一人分 = 割引計算(大人一人分, 降車駅.get_距離(), _片道往復, _利用日, 十八才以上, 十八才未満);
            片道合計金額 = 片道合計金額.足す(大人一人分.かける(十八才以上));
        }
        if (十八才未満.大なりイコール(new 人数(1))) {
            料金 子供一人分 = 子供一人分片道計算(降車駅, _特急利用);
            子供一人分 = 割引計算(子供一人分, 降車駅.get_距離(), _片道往復, _利用日, 十八才以上, 十八才未満);
            片道合計金額 = 片道合計金額.足す(子供一人分.かける(十八才未満));
        }


        return _片道往復.is片道() ? 片道合計金額 : 片道合計金額.足す(片道合計金額);
    }

    private 料金 大人一人分片道計算(駅 降車駅, 特急利用 _特急利用) {
        料金 大人一人分 = 降車駅.get運賃();

        return 大人一人分.足す(_特急利用.指定席片道料金計算(降車駅));
    }

    private 料金 子供一人分片道計算(駅 降車駅, 特急利用 _特急利用) {
        final 割引率 子供割引率 = new 割引率(50);
        料金 子供一人分 = 降車駅.get運賃().割引(子供割引率);

        return 子供一人分.足す(_特急利用.指定席片道料金計算(降車駅).割引(子供割引率));
    }

    private 料金 割引計算(料金 一人分片道料金, 距離 _距離, 片道往復 _片道往復, 利用日 _利用日, 人数 大人人数, 人数 子供人数) {
        一人分片道料金 = 往復割引計算(一人分片道料金, _距離, _片道往復);
        一人分片道料金 = 団体時期割引計算(一人分片道料金, _利用日, 大人人数, 子供人数);
        return 一人分片道料金;
    }

    private 料金 往復割引計算(料金 一人分片道料金, 距離 _距離, 片道往復 _片道往復) {
        if (_片道往復.is片道()) {
            return 一人分片道料金;
        }

        距離 往復割引最短距離 = new 距離(600);
        final 割引率 往復割引率 = new 割引率(10);
        return _距離.大なり(往復割引最短距離) ? 一人分片道料金.割引(往復割引率) : 一人分片道料金;
    }

    private 料金 団体時期割引計算(料金 一人分片道料金, 利用日 _利用日, 人数 大人人数, 人数 子供人数) {
        final 人数 団体割引最少人数 = new 人数(8);
        final 割引率 団体年末年始割引率 = new 割引率(10);
        final 割引率 団体割引率 = new 割引率(15);
        final 人数 全体人数 = 大人人数.足す(子供人数);

        if (全体人数.大なりイコール(団体割引最少人数)) {
            if (_利用日.get_利用日().isAfter(LocalDate.of(_利用日.get_利用日().getYear(), 12, 20)) &&
                    _利用日.get_利用日().isBefore(LocalDate.of(_利用日.get_利用日().getYear(), 1, 11))) {
                一人分片道料金 = 一人分片道料金.割引(団体年末年始割引率);
            } else {
                一人分片道料金 = 一人分片道料金.割引(団体割引率);
            }
        }

        return 一人分片道料金;
    }

    private 人数 無料人数計算(人数 全体人数) {
        final 人数 無料化最少人数 = new 人数(31);
        return 全体人数.大なりイコール(無料化最少人数) ? 全体人数.plus49div50() : new 人数(0);

    }
}
